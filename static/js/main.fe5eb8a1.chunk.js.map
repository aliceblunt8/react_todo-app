{"version":3,"sources":["components/TodoItem.jsx","components/TodoList.jsx","components/TodosFilter.jsx","TodoApp.jsx","index.js"],"names":["TodoItem","todo","checkTodo","removeTodo","updateTitle","useState","isEditable","setEditing","title","setTitle","className","classNames","completed","editing","onDoubleClick","type","checked","onChange","id","onClick","value","event","target","onKeyDown","key","TodoList","items","map","item","TodosFilter","handleFilter","selectedFilter","href","TodoApp","todos","setTodos","newTodo","addNewTodo","filter","setFilter","useEffect","localStorage","length","setItem","JSON","stringify","data","parse","getItem","onSubmit","preventDefault","Date","placeholder","htmlFor","status","filterTodos","todoId","newTitle","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.fe5eb8a1.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\n\nexport const TodoItem = ({ todo, checkTodo, removeTodo, updateTitle }) => {\n  const [isEditable, setEditing] = useState(false);\n  const [title, setTitle] = useState(todo.title);\n\n  const handleEditing = () => {\n    setEditing(!isEditable);\n  };\n\n  const handleKeyDown = (event) => {\n    const { key } = event;\n\n    if (!title || key === 'Escape') {\n      setEditing(false);\n\n      return;\n    }\n\n    if (key === 'Enter') {\n      updateTitle(todo.id, title);\n      setEditing(false);\n    }\n  };\n\n  return (\n    <li\n      className={classNames(\n        { completed: todo.completed },\n        { editing: isEditable },\n      )}\n      onDoubleClick={handleEditing}\n    >\n      <div className=\"view\">\n        <input\n          type=\"checkbox\"\n          className=\"toggle\"\n          checked={todo.completed}\n          onChange={() => checkTodo(todo.id)}\n        />\n        <label>{todo.title}</label>\n        <button\n          type=\"button\"\n          className=\"destroy\"\n          onClick={() => removeTodo(todo.id)}\n        />\n      </div>\n      <input\n        type=\"text\"\n        className=\"edit\"\n        value={title}\n        onChange={event => setTitle(event.target.value)}\n        onKeyDown={handleKeyDown}\n      />\n    </li>\n  );\n};\n\nTodoItem.propTypes = {\n  todo: PropTypes.shape({\n    id: PropTypes.number.isRequired,\n    title: PropTypes.string.isRequired,\n    completed: PropTypes.bool.isRequired,\n  }).isRequired,\n  checkTodo: PropTypes.func.isRequired,\n  removeTodo: PropTypes.func.isRequired,\n  updateTitle: PropTypes.func.isRequired,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { TodoItem } from './TodoItem';\n\nexport const TodoList = ({ items, checkTodo, removeTodo, updateTitle }) => (\n  <ul className=\"todo-list\">\n    {items.map(item => (\n      <TodoItem\n        key={item.id}\n        todo={item}\n        checkTodo={checkTodo}\n        removeTodo={removeTodo}\n        updateTitle={updateTitle}\n      />\n    ))}\n  </ul>\n);\n\nTodoList.propTypes = {\n  items: PropTypes.arrayOf(PropTypes.shape({\n    id: PropTypes.number.isRequired,\n    title: PropTypes.string.isRequired,\n    completed: PropTypes.bool.isRequired,\n  })).isRequired,\n  checkTodo: PropTypes.func.isRequired,\n  removeTodo: PropTypes.func.isRequired,\n  updateTitle: PropTypes.func.isRequired,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nexport const TodosFilter = ({ handleFilter, selectedFilter }) => (\n  <ul className=\"filters\">\n    <li>\n      <a\n        href=\"#/\"\n        className={selectedFilter === 'all' ? 'selected' : ''}\n        onClick={() => handleFilter('all')}\n      >\n        All\n      </a>\n    </li>\n\n    <li>\n      <a\n        href=\"#/active\"\n        className={selectedFilter === 'active' ? 'selected' : ''}\n        onClick={() => handleFilter('active')}\n      >\n        Active\n      </a>\n    </li>\n\n    <li>\n      <a\n        href=\"#/completed\"\n        className={selectedFilter === 'completed' ? 'selected' : ''}\n        onClick={() => handleFilter('completed')}\n      >\n        Completed\n      </a>\n    </li>\n  </ul>\n);\n\nTodosFilter.propTypes = {\n  handleFilter: PropTypes.func.isRequired,\n  selectedFilter: PropTypes.string.isRequired,\n};\n","import React, { useState, useEffect } from 'react';\nimport { TodoList } from './components/TodoList';\nimport { TodosFilter } from './components/TodosFilter';\n\nconst TodoApp = () => {\n  const [todos, setTodos] = useState([]);\n  const [newTodo, addNewTodo] = useState('');\n  const [filter, setFilter] = useState('all');\n\n  useEffect(() => {\n    const items = [];\n\n    if (localStorage.length === 0) {\n      localStorage.setItem('todos', JSON.stringify(items));\n    }\n\n    const data = JSON.parse(localStorage.getItem('todos'));\n\n    setTodos(data);\n  }, []);\n\n  useEffect(() => {\n    localStorage.setItem('todos', JSON.stringify(todos));\n  }, [todos]);\n\n  const handleSubmit = (event) => {\n    event.preventDefault();\n\n    if (!newTodo) {\n      return;\n    }\n\n    setTodos([\n      ...todos,\n      {\n        id: +new Date(),\n        title: newTodo,\n        completed: false,\n      },\n    ]);\n\n    addNewTodo('');\n  };\n\n  const updateTodoStatus = (todoId) => {\n    setTodos(todos.map((todo) => {\n      if (todo.id !== todoId) {\n        return { ...todo };\n      }\n\n      return {\n        ...todo,\n        completed: !todo.completed,\n      };\n    }));\n  };\n\n  const updateTodoTitle = (todoId, newTitle) => {\n    setTodos(todos.map((todo) => {\n      if (todo.id !== todoId) {\n        return { ...todo };\n      }\n\n      return {\n        ...todo,\n        title: newTitle,\n      };\n    }));\n  };\n\n  const toogleAll = (event) => {\n    setTodos(todos.map(todo => (\n      {\n        ...todo,\n        completed: event.target.checked,\n      }\n    )));\n  };\n\n  const filterTodos = (items, status) => {\n    switch (status) {\n      case 'all':\n        return items;\n      case 'active':\n        return items.filter(item => !item.completed);\n      case 'completed':\n        return items.filter(item => item.completed);\n      default:\n        return 'Error!';\n    }\n  };\n\n  const deleteTodo = (todoId) => {\n    setTodos(todos.filter(todo => todo.id !== todoId));\n  };\n\n  const clearCompleted = () => {\n    setTodos(todos.filter(todo => !todo.completed));\n  };\n\n  return (\n    <section className=\"todoapp\">\n      <header className=\"header\">\n        <h1>todos</h1>\n\n        <form onSubmit={handleSubmit}>\n          <input\n            type=\"text\"\n            className=\"new-todo\"\n            placeholder=\"What needs to be done?\"\n            value={newTodo}\n            onChange={event => addNewTodo(event.target.value)}\n          />\n        </form>\n      </header>\n\n      {todos.length > 0 && (\n        <>\n          <section className=\"main\">\n            {todos.length > 0 && (\n              <>\n                <input\n                  type=\"checkbox\"\n                  id=\"toggle-all\"\n                  className=\"toggle-all\"\n                  checked={todos.filter(todo => !todo.completed).length === 0}\n                  onChange={toogleAll}\n                />\n                <label htmlFor=\"toggle-all\">Mark all as complete</label>\n              </>\n            )}\n            <TodoList\n              items={filterTodos(todos, filter)}\n              checkTodo={updateTodoStatus}\n              removeTodo={deleteTodo}\n              updateTitle={updateTodoTitle}\n            />\n          </section>\n\n          <footer className=\"footer\">\n            <span className=\"todo-count\">\n              {`${todos.filter(todo => !todo.completed).length} items left`}\n            </span>\n\n            <TodosFilter\n              handleFilter={status => setFilter(status)}\n              selectedFilter={filter}\n            />\n            {todos.length > 0 && (\n              <button\n                type=\"button\"\n                className=\"clear-completed\"\n                onClick={clearCompleted}\n              >\n                Clear completed\n              </button>\n            )}\n          </footer>\n        </>\n      )}\n    </section>\n  );\n};\n\nexport default TodoApp;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport './styles/index.css';\nimport './styles/todo-list.css';\nimport './styles/filters.css';\n\nimport TodoApp from './TodoApp';\n\nReactDOM.render(\n  <TodoApp />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}