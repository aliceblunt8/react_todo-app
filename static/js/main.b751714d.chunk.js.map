{"version":3,"sources":["components/TodoItem.jsx","components/TodoList.jsx","constants.js","components/TodosFilter.jsx","TodoApp.jsx","helpers.js","index.js"],"names":["TodoItem","todo","removeTodo","updateTodo","useState","isEditable","setEditing","title","newTitle","setTitle","className","classNames","completed","editing","onDoubleClick","type","checked","onChange","id","onClick","autoFocus","value","event","target","trim","onKeyUp","key","onBlur","TodoList","items","map","item","FILTERS","TodosFilter","handleFilter","selectedFilter","href","selected","TodoApp","todos","setTodos","newTodo","setNewTodo","filter","setFilter","completedTodos","useMemo","length","activedTodos","useEffect","localStorage","JSON","parse","getItem","setItem","stringify","filteredTodos","status","getfilteredTodos","onSubmit","preventDefault","Date","placeholder","htmlFor","todoId","ReactDOM","render","document","getElementById"],"mappings":"4TAIaA,EAAW,SAAC,GAAsC,IAApCC,EAAmC,EAAnCA,KAAMC,EAA6B,EAA7BA,WAAYC,EAAiB,EAAjBA,WAAiB,EAC3BC,oBAAS,GADkB,mBACrDC,EADqD,KACzCC,EADyC,OAE/BF,mBAASH,EAAKM,OAFiB,mBAErDC,EAFqD,KAE3CC,EAF2C,KAsC5D,OACE,wBACEC,UAAWC,IACT,CAAEC,UAAWX,EAAKW,WAClB,CAAEC,QAASR,IAEbS,cAAe,kBAAMR,GAAYD,KAEjC,yBAAKK,UAAU,QACb,2BACEK,KAAK,WACLL,UAAU,SACVM,QAASf,EAAKW,UACdK,SAAU,kBAAMd,EAAWF,EAAKiB,OAElC,+BAAQjB,EAAKM,OACb,4BACEQ,KAAK,SACLL,UAAU,UACVS,QAAS,kBAAMjB,EAAWD,EAAKiB,QAGlCb,GACC,2BACEU,KAAK,OACLL,UAAU,OACVU,WAAS,EACTC,MAAOb,EACPS,SAAU,SAAAK,GAAK,OAAIb,EAASa,EAAMC,OAAOF,MAAMG,SAC/CC,QA/Dc,SAACH,GAGrB,OAFgBA,EAARI,KAGN,IAAK,QACClB,EACFL,EAAWF,EAAKiB,GAAIV,GAEpBC,EAASR,EAAKM,OAGhBD,GAAW,GACX,MAEF,IAAK,SACHA,GAAW,GACXG,EAASR,EAAKM,SAgDZoB,OAxCW,WACbnB,EACFL,EAAWF,EAAKiB,GAAIV,GAEpBC,EAASR,EAAKM,OAGhBD,GAAW,QCnCFsB,EAAW,SAAC,GAAD,IAAGC,EAAH,EAAGA,MAAO1B,EAAV,EAAUA,WAAYD,EAAtB,EAAsBA,WAAtB,OACtB,wBAAIQ,UAAU,aACXmB,EAAMC,KAAI,SAAAC,GAAI,OACb,kBAAC,EAAD,CACEL,IAAKK,EAAKb,GACVjB,KAAM8B,EACN5B,WAAYA,EACZD,WAAYA,SCXP8B,EACN,MADMA,EAEH,SAFGA,EAGA,YCEAC,EAAc,SAAC,GAAD,IAAGC,EAAH,EAAGA,aAAcC,EAAjB,EAAiBA,eAAjB,OACzB,wBAAIzB,UAAU,WACZ,4BACE,uBACE0B,KAAK,KACL1B,UAAWC,IAAW,CAAE0B,SAAUF,IAAmBH,IACrDb,QAAS,kBAAMe,EAAaF,KAH9B,QASF,4BACE,uBACEI,KAAK,WACL1B,UAAWyB,IAAmBH,EAAiB,WAAa,GAC5Db,QAAS,kBAAMe,EAAaF,KAH9B,WASF,4BACE,uBACEI,KAAK,cACL1B,UAAWyB,IAAmBH,EAAoB,WAAa,GAC/Db,QAAS,kBAAMe,EAAaF,KAH9B,gBC0HSM,EAjJC,WAAO,IAAD,EACMlC,mBAAS,IADf,mBACbmC,EADa,KACNC,EADM,OAEUpC,mBAAS,IAFnB,mBAEbqC,EAFa,KAEJC,EAFI,OAGQtC,mBAAS,OAHjB,mBAGbuC,EAHa,KAGLC,EAHK,KAIdC,EAAiBC,mBACrB,kBAAMP,EAAMI,QAAO,SAAA1C,GAAI,OAAIA,EAAKW,aAAWmC,SAC3C,CAACR,IAEGS,EAAeF,mBACnB,kBAAMP,EAAMI,QAAO,SAAA1C,GAAI,OAAKA,EAAKW,aAAWmC,SAC5C,CAACR,IAGHU,qBAAU,WACHC,aAAaX,MAGhBC,EAASW,KAAKC,MAAMF,aAAaG,QAAQ,WAFzCH,aAAaI,QAAQ,QAASH,KAAKI,UAAU,OAI9C,IAEHN,qBAAU,WACRC,aAAaI,QAAQ,QAASH,KAAKI,UAAUhB,MAC5C,CAACA,IAEJ,IAgDMiB,EAAgBV,mBACpB,kBC7E4B,SAACjB,EAAO4B,GACtC,OAAQA,GACN,KAAKzB,EACH,OAAOH,EACT,KAAKG,EACH,OAAOH,EAAMc,QAAO,SAAAZ,GAAI,OAAKA,EAAKnB,aACpC,KAAKoB,EACH,OAAOH,EAAMc,QAAO,SAAAZ,GAAI,OAAIA,EAAKnB,aACnC,QACE,MAAO,UDoEH8C,CAAiBnB,EAAOI,KAC9B,CAACJ,EAAOI,IAWV,OACE,6BAASjC,UAAU,WACjB,4BAAQA,UAAU,UAChB,qCAEA,0BAAMiD,SAlES,SAACrC,GACpBA,EAAMsC,iBAEDnB,IAILD,EAAS,GAAD,mBACHD,GADG,CAEN,CACErB,IAAK,IAAI2C,KACTtD,MAAOkC,EACP7B,WAAW,MAIf8B,EAAW,OAmDL,2BACE3B,KAAK,OACLL,UAAU,WACVoD,YAAY,yBACZzC,MAAOoB,EACPxB,SAAU,SAAAK,GAAK,OAAIoB,EAAWpB,EAAMC,OAAOF,MAAMG,aAKtDe,EAAMQ,OAAS,GACd,oCACE,6BAASrC,UAAU,QACjB,2BACEK,KAAK,WACLG,GAAG,aACHR,UAAU,aACVM,QAA4B,IAAnB6B,EACT5B,SA9CM,SAACK,GACjBkB,EAASD,EAAMT,KAAI,SAAA7B,GAAI,kCAEhBA,GAFgB,IAGnBW,UAAWU,EAAMC,OAAOP,iBA4CpB,2BAAO+C,QAAQ,cAAf,wBACA,kBAAC,EAAD,CACElC,MAAO2B,EACPrD,WAvEW,SAAC6D,EAAQxD,GAC9BgC,EAASD,EAAMT,KAAI,SAAC7B,GAClB,OAAIA,EAAKiB,KAAO8C,EACP,eAAK/D,GAGVO,EACK,2BACFP,GADL,IAEEM,MAAOC,IAIJ,2BACFP,GADL,IAEEW,WAAYX,EAAKW,iBAyDXV,WAtCO,SAAC8D,GAClBxB,EAASD,EAAMI,QAAO,SAAA1C,GAAI,OAAIA,EAAKiB,KAAO8C,UAyCpC,4BAAQtD,UAAU,UAChB,0BAAMA,UAAU,cAAhB,UACMsC,EADN,gBAIA,kBAAC,EAAD,CACEd,aAAc,SAAAuB,GAAM,OAAIb,EAAUa,IAClCtB,eAAgBQ,IAEjBE,EAAiB,GAChB,4BACE9B,KAAK,SACLL,UAAU,kBACVS,QAnDS,WACrBqB,EAASD,EAAMI,QAAO,SAAA1C,GAAI,OAAKA,EAAKW,gBA+C1B,uBE9HdqD,IAASC,OACP,kBAAC,EAAD,MACAC,SAASC,eAAe,W","file":"static/js/main.b751714d.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\n\nexport const TodoItem = ({ todo, removeTodo, updateTodo }) => {\n  const [isEditable, setEditing] = useState(false);\n  const [newTitle, setTitle] = useState(todo.title);\n\n  const handleEditing = (event) => {\n    const { key } = event;\n\n    switch (key) {\n      case 'Enter':\n        if (newTitle) {\n          updateTodo(todo.id, newTitle);\n        } else {\n          setTitle(todo.title);\n        }\n\n        setEditing(false);\n        break;\n\n      case 'Escape':\n        setEditing(false);\n        setTitle(todo.title);\n        break;\n\n      default:\n        break;\n    }\n  };\n\n  const handleBlur = () => {\n    if (newTitle) {\n      updateTodo(todo.id, newTitle);\n    } else {\n      setTitle(todo.title);\n    }\n\n    setEditing(false);\n  };\n\n  return (\n    <li\n      className={classNames(\n        { completed: todo.completed },\n        { editing: isEditable },\n      )}\n      onDoubleClick={() => setEditing(!isEditable)}\n    >\n      <div className=\"view\">\n        <input\n          type=\"checkbox\"\n          className=\"toggle\"\n          checked={todo.completed}\n          onChange={() => updateTodo(todo.id)}\n        />\n        <label>{todo.title}</label>\n        <button\n          type=\"button\"\n          className=\"destroy\"\n          onClick={() => removeTodo(todo.id)}\n        />\n      </div>\n      {isEditable && (\n        <input\n          type=\"text\"\n          className=\"edit\"\n          autoFocus\n          value={newTitle}\n          onChange={event => setTitle(event.target.value.trim())}\n          onKeyUp={handleEditing}\n          onBlur={handleBlur}\n        />\n      )}\n    </li>\n  );\n};\n\nTodoItem.propTypes = {\n  todo: PropTypes.shape({\n    id: PropTypes.number.isRequired,\n    title: PropTypes.string.isRequired,\n    completed: PropTypes.bool.isRequired,\n  }).isRequired,\n  updateTodo: PropTypes.func.isRequired,\n  removeTodo: PropTypes.func.isRequired,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { TodoItem } from './TodoItem';\n\nexport const TodoList = ({ items, updateTodo, removeTodo }) => (\n  <ul className=\"todo-list\">\n    {items.map(item => (\n      <TodoItem\n        key={item.id}\n        todo={item}\n        updateTodo={updateTodo}\n        removeTodo={removeTodo}\n      />\n    ))}\n  </ul>\n);\n\nTodoList.propTypes = {\n  items: PropTypes.arrayOf(PropTypes.shape({\n    id: PropTypes.number.isRequired,\n    title: PropTypes.string.isRequired,\n    completed: PropTypes.bool.isRequired,\n  })).isRequired,\n  updateTodo: PropTypes.func.isRequired,\n  removeTodo: PropTypes.func.isRequired,\n};\n","export const FILTERS = {\n  all: 'all',\n  active: 'active',\n  completed: 'completed',\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport { FILTERS } from '../constants';\n\nexport const TodosFilter = ({ handleFilter, selectedFilter }) => (\n  <ul className=\"filters\">\n    <li>\n      <a\n        href=\"#/\"\n        className={classNames({ selected: selectedFilter === FILTERS.all })}\n        onClick={() => handleFilter(FILTERS.all)}\n      >\n        All\n      </a>\n    </li>\n\n    <li>\n      <a\n        href=\"#/active\"\n        className={selectedFilter === FILTERS.active ? 'selected' : ''}\n        onClick={() => handleFilter(FILTERS.active)}\n      >\n        Active\n      </a>\n    </li>\n\n    <li>\n      <a\n        href=\"#/completed\"\n        className={selectedFilter === FILTERS.completed ? 'selected' : ''}\n        onClick={() => handleFilter(FILTERS.completed)}\n      >\n        Completed\n      </a>\n    </li>\n  </ul>\n);\n\nTodosFilter.propTypes = {\n  handleFilter: PropTypes.func.isRequired,\n  selectedFilter: PropTypes.string.isRequired,\n};\n","import React, { useState, useEffect, useMemo } from 'react';\nimport { TodoList } from './components/TodoList';\nimport { TodosFilter } from './components/TodosFilter';\nimport { getfilteredTodos } from './helpers';\n\nconst TodoApp = () => {\n  const [todos, setTodos] = useState([]);\n  const [newTodo, setNewTodo] = useState('');\n  const [filter, setFilter] = useState('all');\n  const completedTodos = useMemo(\n    () => todos.filter(todo => todo.completed).length,\n    [todos],\n  );\n  const activedTodos = useMemo(\n    () => todos.filter(todo => !todo.completed).length,\n    [todos],\n  );\n\n  useEffect(() => {\n    if (!localStorage.todos) {\n      localStorage.setItem('todos', JSON.stringify([]));\n    } else {\n      setTodos(JSON.parse(localStorage.getItem('todos')));\n    }\n  }, []);\n\n  useEffect(() => {\n    localStorage.setItem('todos', JSON.stringify(todos));\n  }, [todos]);\n\n  const handleSubmit = (event) => {\n    event.preventDefault();\n\n    if (!newTodo) {\n      return;\n    }\n\n    setTodos([\n      ...todos,\n      {\n        id: +new Date(),\n        title: newTodo,\n        completed: false,\n      },\n    ]);\n\n    setNewTodo('');\n  };\n\n  const updateTodoItem = (todoId, newTitle) => {\n    setTodos(todos.map((todo) => {\n      if (todo.id !== todoId) {\n        return { ...todo };\n      }\n\n      if (newTitle) {\n        return {\n          ...todo,\n          title: newTitle,\n        };\n      }\n\n      return {\n        ...todo,\n        completed: !todo.completed,\n      };\n    }));\n  };\n\n  const toogleAll = (event) => {\n    setTodos(todos.map(todo => (\n      {\n        ...todo,\n        completed: event.target.checked,\n      }\n    )));\n  };\n\n  const filteredTodos = useMemo(\n    () => getfilteredTodos(todos, filter),\n    [todos, filter],\n  );\n\n  const deleteTodo = (todoId) => {\n    setTodos(todos.filter(todo => todo.id !== todoId));\n  };\n\n  const clearCompleted = () => {\n    setTodos(todos.filter(todo => !todo.completed));\n  };\n\n  return (\n    <section className=\"todoapp\">\n      <header className=\"header\">\n        <h1>todos</h1>\n\n        <form onSubmit={handleSubmit}>\n          <input\n            type=\"text\"\n            className=\"new-todo\"\n            placeholder=\"What needs to be done?\"\n            value={newTodo}\n            onChange={event => setNewTodo(event.target.value.trim())}\n          />\n        </form>\n      </header>\n\n      {todos.length > 0 && (\n        <>\n          <section className=\"main\">\n            <input\n              type=\"checkbox\"\n              id=\"toggle-all\"\n              className=\"toggle-all\"\n              checked={completedTodos === 0}\n              onChange={toogleAll}\n            />\n            <label htmlFor=\"toggle-all\">Mark all as complete</label>\n            <TodoList\n              items={filteredTodos}\n              updateTodo={updateTodoItem}\n              removeTodo={deleteTodo}\n            />\n          </section>\n\n          <footer className=\"footer\">\n            <span className=\"todo-count\">\n              {`${activedTodos} items left`}\n            </span>\n\n            <TodosFilter\n              handleFilter={status => setFilter(status)}\n              selectedFilter={filter}\n            />\n            {completedTodos > 0 && (\n              <button\n                type=\"button\"\n                className=\"clear-completed\"\n                onClick={clearCompleted}\n              >\n                Clear completed\n              </button>\n            )}\n          </footer>\n        </>\n      )}\n    </section>\n  );\n};\n\nexport default TodoApp;\n","import { FILTERS } from './constants';\n\nexport const getfilteredTodos = (items, status) => {\n  switch (status) {\n    case FILTERS.all:\n      return items;\n    case FILTERS.active:\n      return items.filter(item => !item.completed);\n    case FILTERS.completed:\n      return items.filter(item => item.completed);\n    default:\n      return 'Error!';\n  }\n};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport './styles/index.css';\nimport './styles/todo-list.css';\nimport './styles/filters.css';\n\nimport TodoApp from './TodoApp';\n\nReactDOM.render(\n  <TodoApp />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}