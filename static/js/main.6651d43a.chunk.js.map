{"version":3,"sources":["redux/store.js","components/TodoItem.jsx","components/TodoList.jsx","constants.js","components/TodosFilter.jsx","TodoApp.jsx","helpers.js","index.js"],"names":["initialState","todos","getTodos","state","updateTodo","todoId","title","type","store","createStore","action","todo","filter","id","map","completed","checked","TodoItem","useState","isEditable","setEditing","newTitle","setTitle","dispatch","useDispatch","className","classNames","editing","onDoubleClick","onChange","onClick","autoFocus","value","event","target","trim","onKeyUp","key","onBlur","TodoList","React","memo","items","item","propTypes","PropTypes","arrayOf","shape","number","isRequired","string","bool","FILTERS","TodosFilter","handleFilter","selectedFilter","href","selected","TodoApp","useSelector","newTodo","setNewTodo","setFilter","completedTodos","useMemo","length","activeTodos","useEffect","localStorage","setTodos","JSON","parse","getItem","setItem","stringify","filteredTodos","status","getfilteredTodos","onSubmit","preventDefault","Date","placeholder","trimLeft","htmlFor","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.6651d43a.chunk.js","sourcesContent":["import { createStore } from 'redux';\n\nconst initialState = {\n  todos: [],\n};\n\n// Selectors\nexport const getTodos = state => state.todos;\n\n// Action types\nconst SET_TODOS = 'SET_TODOS';\nconst ADD_TODO = 'ADD_TODO';\nconst DELETE_TODO = 'DELETE_TODO';\nconst UPDATE_TODO = 'UPDATE_TODO';\nconst TOGGLE_TODOS = 'TOGGLE_TODOS';\nconst CLEAR_COMPLETED = 'CLEAR_COMPLETED';\n\n// Action creators\nexport const setTodos = todos => ({\n  type: SET_TODOS,\n  todos,\n});\n\nexport const addTodo = todo => ({\n  type: ADD_TODO,\n  todo,\n});\n\nexport const deleteTodo = todoId => ({\n  type: DELETE_TODO,\n  todoId,\n});\n\nexport const updateTodo = (todoId, title) => ({\n  type: UPDATE_TODO,\n  todoId,\n  title,\n});\n\nexport const toggleTodos = checked => ({\n  type: TOGGLE_TODOS,\n  checked,\n});\n\nexport const clearCompleted = () => ({\n  type: CLEAR_COMPLETED,\n});\n\n// Reducer\nconst reducer = (state = initialState, action) => {\n  switch (action.type) {\n    case SET_TODOS:\n      return {\n        ...state,\n        todos: action.todos,\n      };\n    case ADD_TODO:\n      return {\n        ...state,\n        todos: [\n          ...state.todos,\n          action.todo,\n        ],\n      };\n    case DELETE_TODO:\n      return {\n        ...state,\n        todos: state.todos.filter(todo => todo.id !== action.todoId),\n      };\n    case UPDATE_TODO:\n      return {\n        ...state,\n        todos: state.todos.map((todo) => {\n          if (todo.id !== action.todoId) {\n            return { ...todo };\n          }\n\n          if (action.title) {\n            return {\n              ...todo,\n              title: action.title,\n            };\n          }\n\n          return {\n            ...todo,\n            completed: !todo.completed,\n          };\n        }),\n      };\n    case TOGGLE_TODOS:\n      return {\n        ...state,\n        todos: state.todos.map(todo => (\n          {\n            ...todo,\n            completed: action.checked,\n          }\n        )),\n      };\n    case CLEAR_COMPLETED:\n      return {\n        ...state,\n        todos: state.todos.filter(todo => !todo.completed),\n      };\n    default:\n      return state;\n  }\n};\n\nconst store = createStore(reducer);\n\nexport default store;\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport { useDispatch } from 'react-redux';\nimport { deleteTodo, updateTodo } from '../redux/store';\n\nexport const TodoItem = ({ todo }) => {\n  const [isEditable, setEditing] = useState(false);\n  const [newTitle, setTitle] = useState(todo.title);\n  const dispatch = useDispatch();\n\n  const handleEditing = (event) => {\n    const { key } = event;\n\n    switch (key) {\n      case 'Enter':\n        if (newTitle) {\n          dispatch(updateTodo(todo.id, newTitle));\n        } else {\n          setTitle(todo.title);\n        }\n\n        setEditing(false);\n        break;\n\n      case 'Escape':\n        setEditing(false);\n        setTitle(todo.title);\n        break;\n\n      default:\n        break;\n    }\n  };\n\n  const handleBlur = () => {\n    if (newTitle) {\n      dispatch(updateTodo(todo.id, newTitle));\n    } else {\n      setTitle(todo.title);\n    }\n\n    setEditing(false);\n  };\n\n  return (\n    <li\n      className={classNames(\n        { completed: todo.completed },\n        { editing: isEditable },\n      )}\n      onDoubleClick={() => setEditing(!isEditable)}\n    >\n      <div className=\"view\">\n        <input\n          type=\"checkbox\"\n          className=\"toggle\"\n          checked={todo.completed}\n          onChange={() => dispatch(updateTodo(todo.id))}\n        />\n        <label>{todo.title}</label>\n        <button\n          type=\"button\"\n          className=\"destroy\"\n          onClick={() => dispatch(deleteTodo(todo.id))}\n        />\n      </div>\n      {isEditable && (\n        <input\n          type=\"text\"\n          className=\"edit\"\n          autoFocus\n          value={newTitle}\n          onChange={event => setTitle(event.target.value.trim())}\n          onKeyUp={handleEditing}\n          onBlur={handleBlur}\n        />\n      )}\n    </li>\n  );\n};\n\nTodoItem.propTypes = {\n  todo: PropTypes.shape({\n    id: PropTypes.number.isRequired,\n    title: PropTypes.string.isRequired,\n    completed: PropTypes.bool.isRequired,\n  }).isRequired,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { TodoItem } from './TodoItem';\n\nexport const TodoList = React.memo(\n  ({ items }) => (\n    <ul className=\"todo-list\">\n      {items.map(item => (\n        <TodoItem\n          key={item.id}\n          todo={item}\n        />\n      ))}\n    </ul>\n  ),\n);\n\nTodoList.propTypes = {\n  items: PropTypes.arrayOf(PropTypes.shape({\n    id: PropTypes.number.isRequired,\n    title: PropTypes.string.isRequired,\n    completed: PropTypes.bool.isRequired,\n  })).isRequired,\n};\n","export const FILTERS = {\n  all: 'all',\n  active: 'active',\n  completed: 'completed',\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport { FILTERS } from '../constants';\n\nexport const TodosFilter = ({ handleFilter, selectedFilter }) => (\n  <ul className=\"filters\">\n    <li>\n      <a\n        href=\"#/\"\n        className={classNames({ selected: selectedFilter === FILTERS.all })}\n        onClick={() => handleFilter(FILTERS.all)}\n      >\n        All\n      </a>\n    </li>\n\n    <li>\n      <a\n        href=\"#/active\"\n        className={classNames({ selected: selectedFilter === FILTERS.active })}\n        onClick={() => handleFilter(FILTERS.active)}\n      >\n        Active\n      </a>\n    </li>\n\n    <li>\n      <a\n        href=\"#/completed\"\n        className={classNames(\n          { selected: selectedFilter === FILTERS.completed },\n        )}\n        onClick={() => handleFilter(FILTERS.completed)}\n      >\n        Completed\n      </a>\n    </li>\n  </ul>\n);\n\nTodosFilter.propTypes = {\n  handleFilter: PropTypes.func.isRequired,\n  selectedFilter: PropTypes.string.isRequired,\n};\n","/* eslint-disable max-len */\nimport React, { useState, useEffect, useMemo } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { TodoList } from './components/TodoList';\nimport { TodosFilter } from './components/TodosFilter';\nimport { getfilteredTodos } from './helpers';\nimport { getTodos, setTodos, addTodo, toggleTodos, clearCompleted } from './redux/store';\n\nconst TodoApp = () => {\n  const todos = useSelector(getTodos);\n  const dispatch = useDispatch();\n\n  const [newTodo, setNewTodo] = useState('');\n  const [filter, setFilter] = useState('all');\n  const completedTodos = useMemo(\n    () => todos.filter(todo => todo.completed).length,\n    [todos],\n  );\n  const activeTodos = useMemo(\n    () => todos.filter(todo => !todo.completed).length,\n    [todos],\n  );\n\n  useEffect(() => {\n    if (!localStorage.todos) {\n      localStorage.setItem('todos', JSON.stringify([]));\n    } else {\n      dispatch(setTodos(JSON.parse(localStorage.getItem('todos'))));\n    }\n  }, []);\n\n  useEffect(() => {\n    localStorage.setItem('todos', JSON.stringify(todos));\n  }, [todos]);\n\n  const handleSubmit = (event) => {\n    event.preventDefault();\n\n    if (!newTodo) {\n      return;\n    }\n\n    dispatch(addTodo({\n      id: +new Date(),\n      title: newTodo,\n      completed: false,\n    }));\n\n    setNewTodo('');\n  };\n\n  const filteredTodos = useMemo(\n    () => getfilteredTodos(todos, filter),\n    [todos, filter],\n  );\n\n  return (\n    <section className=\"todoapp\">\n      <header className=\"header\">\n        <h1>todos</h1>\n\n        <form onSubmit={handleSubmit}>\n          <input\n            type=\"text\"\n            className=\"new-todo\"\n            placeholder=\"What needs to be done?\"\n            value={newTodo}\n            onChange={event => setNewTodo(event.target.value.trimLeft())}\n          />\n        </form>\n      </header>\n\n      {todos.length > 0 && (\n        <>\n          <section className=\"main\">\n            <input\n              type=\"checkbox\"\n              id=\"toggle-all\"\n              className=\"toggle-all\"\n              checked={activeTodos === 0}\n              onChange={event => dispatch(toggleTodos(event.target.checked))}\n            />\n            <label htmlFor=\"toggle-all\">Mark all as complete</label>\n            <TodoList\n              items={filteredTodos}\n            />\n          </section>\n\n          <footer className=\"footer\">\n            <span className=\"todo-count\">\n              {`${activeTodos} items left`}\n            </span>\n\n            <TodosFilter\n              handleFilter={status => setFilter(status)}\n              selectedFilter={filter}\n            />\n            {completedTodos > 0 && (\n              <button\n                type=\"button\"\n                className=\"clear-completed\"\n                onClick={() => dispatch(clearCompleted())}\n              >\n                Clear completed\n              </button>\n            )}\n          </footer>\n        </>\n      )}\n    </section>\n  );\n};\n\nexport default TodoApp;\n","import { FILTERS } from './constants';\n\nexport const getfilteredTodos = (items, status) => {\n  switch (status) {\n    case FILTERS.all:\n      return items;\n    case FILTERS.active:\n      return items.filter(item => !item.completed);\n    case FILTERS.completed:\n      return items.filter(item => item.completed);\n    default:\n      return 'Error!';\n  }\n};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport store from './redux/store';\n\nimport './styles/index.css';\nimport './styles/todo-list.css';\nimport './styles/filters.css';\n\nimport TodoApp from './TodoApp';\n\nReactDOM.render(\n  <Provider store={store}>\n    <TodoApp />\n  </Provider>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}