{"version":3,"sources":["components/TodoItem.jsx","components/TodoList.jsx","constants.js","components/TodosFilter.jsx","TodoApp.jsx","index.js"],"names":["TodoItem","todo","checkTodo","removeTodo","updateTitle","useState","isEditable","setEditing","title","newTitle","setTitle","className","classNames","completed","editing","onDoubleClick","type","checked","onChange","id","onClick","autoFocus","value","event","target","trim","onKeyUp","key","onBlur","TodoList","items","map","item","FILTERS","TodosFilter","handleFilter","selectedFilter","href","TodoApp","todos","setTodos","newTodo","setNewTodo","filter","setFilter","completedTodos","length","useEffect","localStorage","JSON","parse","getItem","setItem","stringify","filteredTodos","useMemo","status","getfilteredTodos","onSubmit","preventDefault","Date","placeholder","htmlFor","todoId","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.51daa6bb.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\n\nexport const TodoItem = ({ todo, checkTodo, removeTodo, updateTitle }) => {\n  const [isEditable, setEditing] = useState(false);\n  const [newTitle, setTitle] = useState(todo.title);\n\n  const handleEditing = (event) => {\n    const { key } = event;\n\n    switch (key) {\n      case 'Enter':\n        if (newTitle) {\n          updateTitle(todo.id, newTitle);\n        } else {\n          setTitle(todo.title);\n        }\n\n        setEditing(false);\n        break;\n\n      case 'Escape':\n        setEditing(false);\n        setTitle(todo.title);\n        break;\n\n      default:\n        break;\n    }\n  };\n\n  const handleBlur = () => {\n    if (newTitle) {\n      updateTitle(todo.id, newTitle);\n    } else {\n      setTitle(todo.title);\n    }\n\n    setEditing(false);\n  };\n\n  return (\n    <li\n      className={classNames(\n        { completed: todo.completed },\n        { editing: isEditable },\n      )}\n      onDoubleClick={() => setEditing(!isEditable)}\n    >\n      <div className=\"view\">\n        <input\n          type=\"checkbox\"\n          className=\"toggle\"\n          checked={todo.completed}\n          onChange={() => checkTodo(todo.id)}\n        />\n        <label>{todo.title}</label>\n        <button\n          type=\"button\"\n          className=\"destroy\"\n          onClick={() => removeTodo(todo.id)}\n        />\n      </div>\n      {isEditable && (\n        <input\n          type=\"text\"\n          className=\"edit\"\n          autoFocus\n          value={newTitle}\n          onChange={event => setTitle(event.target.value.trim())}\n          onKeyUp={handleEditing}\n          onBlur={handleBlur}\n        />\n      )}\n    </li>\n  );\n};\n\nTodoItem.propTypes = {\n  todo: PropTypes.shape({\n    id: PropTypes.number.isRequired,\n    title: PropTypes.string.isRequired,\n    completed: PropTypes.bool.isRequired,\n  }).isRequired,\n  checkTodo: PropTypes.func.isRequired,\n  removeTodo: PropTypes.func.isRequired,\n  updateTitle: PropTypes.func.isRequired,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { TodoItem } from './TodoItem';\n\nexport const TodoList = ({ items, checkTodo, removeTodo, updateTitle }) => (\n  <ul className=\"todo-list\">\n    {items.map(item => (\n      <TodoItem\n        key={item.id}\n        todo={item}\n        checkTodo={checkTodo}\n        removeTodo={removeTodo}\n        updateTitle={updateTitle}\n      />\n    ))}\n  </ul>\n);\n\nTodoList.propTypes = {\n  items: PropTypes.arrayOf(PropTypes.shape({\n    id: PropTypes.number.isRequired,\n    title: PropTypes.string.isRequired,\n    completed: PropTypes.bool.isRequired,\n  })).isRequired,\n  checkTodo: PropTypes.func.isRequired,\n  removeTodo: PropTypes.func.isRequired,\n  updateTitle: PropTypes.func.isRequired,\n};\n","export const FILTERS = { all: 'all', active: 'active', completed: 'completed' };\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { FILTERS } from '../constants';\n\nexport const TodosFilter = ({ handleFilter, selectedFilter }) => (\n  <ul className=\"filters\">\n    <li>\n      <a\n        href=\"#/\"\n        className={selectedFilter === FILTERS.all ? 'selected' : ''}\n        onClick={() => handleFilter(FILTERS.all)}\n      >\n        All\n      </a>\n    </li>\n\n    <li>\n      <a\n        href=\"#/active\"\n        className={selectedFilter === FILTERS.active ? 'selected' : ''}\n        onClick={() => handleFilter(FILTERS.active)}\n      >\n        Active\n      </a>\n    </li>\n\n    <li>\n      <a\n        href=\"#/completed\"\n        className={selectedFilter === FILTERS.completed ? 'selected' : ''}\n        onClick={() => handleFilter(FILTERS.completed)}\n      >\n        Completed\n      </a>\n    </li>\n  </ul>\n);\n\nTodosFilter.propTypes = {\n  handleFilter: PropTypes.func.isRequired,\n  selectedFilter: PropTypes.string.isRequired,\n};\n","import React, { useState, useEffect, useMemo } from 'react';\nimport { TodoList } from './components/TodoList';\nimport { TodosFilter } from './components/TodosFilter';\nimport { FILTERS } from './constants';\n\nconst getfilteredTodos = (items, status) => {\n  switch (status) {\n    case FILTERS.all:\n      return items;\n    case FILTERS.active:\n      return items.filter(item => !item.completed);\n    case FILTERS.completed:\n      return items.filter(item => item.completed);\n    default:\n      return 'Error!';\n  }\n};\n\nconst TodoApp = () => {\n  const [todos, setTodos] = useState([]);\n  const [newTodo, setNewTodo] = useState('');\n  const [filter, setFilter] = useState('all');\n  const completedTodos = todos.filter(todo => !todo.completed).length;\n\n  useEffect(() => {\n    if (!localStorage.todos) {\n      localStorage.setItem('todos', JSON.stringify([]));\n    } else {\n      setTodos(JSON.parse(localStorage.getItem('todos')));\n    }\n  }, []);\n\n  useEffect(() => {\n    localStorage.setItem('todos', JSON.stringify(todos));\n  }, [todos]);\n\n  const handleSubmit = (event) => {\n    event.preventDefault();\n\n    if (!newTodo) {\n      return;\n    }\n\n    setTodos([\n      ...todos,\n      {\n        id: +new Date(),\n        title: newTodo,\n        completed: false,\n      },\n    ]);\n\n    setNewTodo('');\n  };\n\n  const updateTodoStatus = (todoId) => {\n    setTodos(todos.map((todo) => {\n      if (todo.id !== todoId) {\n        return { ...todo };\n      }\n\n      return {\n        ...todo,\n        completed: !todo.completed,\n      };\n    }));\n  };\n\n  const updateTodoTitle = (todoId, newTitle) => {\n    setTodos(todos.map((todo) => {\n      if (todo.id !== todoId) {\n        return { ...todo };\n      }\n\n      return {\n        ...todo,\n        title: newTitle,\n      };\n    }));\n  };\n\n  const toogleAll = (event) => {\n    setTodos(todos.map(todo => (\n      {\n        ...todo,\n        completed: event.target.checked,\n      }\n    )));\n  };\n\n  const filteredTodos = useMemo(\n    () => getfilteredTodos(todos, filter),\n    [todos, filter],\n  );\n\n  const deleteTodo = (todoId) => {\n    setTodos(todos.filter(todo => todo.id !== todoId));\n  };\n\n  const clearCompleted = () => {\n    setTodos(todos.filter(todo => !todo.completed));\n  };\n\n  return (\n    <section className=\"todoapp\">\n      <header className=\"header\">\n        <h1>todos</h1>\n\n        <form onSubmit={handleSubmit}>\n          <input\n            type=\"text\"\n            className=\"new-todo\"\n            placeholder=\"What needs to be done?\"\n            value={newTodo}\n            onChange={event => setNewTodo(event.target.value)}\n          />\n        </form>\n      </header>\n\n      {todos.length > 0 && (\n        <>\n          <section className=\"main\">\n            {todos.length > 0 && (\n              <>\n                <input\n                  type=\"checkbox\"\n                  id=\"toggle-all\"\n                  className=\"toggle-all\"\n                  checked={completedTodos === 0}\n                  onChange={toogleAll}\n                />\n                <label htmlFor=\"toggle-all\">Mark all as complete</label>\n              </>\n            )}\n            <TodoList\n              items={filteredTodos}\n              checkTodo={updateTodoStatus}\n              removeTodo={deleteTodo}\n              updateTitle={updateTodoTitle}\n            />\n          </section>\n\n          <footer className=\"footer\">\n            <span className=\"todo-count\">\n              {`${completedTodos} items left`}\n            </span>\n\n            <TodosFilter\n              handleFilter={status => setFilter(status)}\n              selectedFilter={filter}\n            />\n            {todos.length > 0 && (\n              <button\n                type=\"button\"\n                className=\"clear-completed\"\n                onClick={clearCompleted}\n              >\n                Clear completed\n              </button>\n            )}\n          </footer>\n        </>\n      )}\n    </section>\n  );\n};\n\nexport default TodoApp;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport './styles/index.css';\nimport './styles/todo-list.css';\nimport './styles/filters.css';\n\nimport TodoApp from './TodoApp';\n\nReactDOM.render(\n  <TodoApp />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}